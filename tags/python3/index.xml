<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python3 on Blogging by Heath™</title><link>https://heathhenley.github.io/tags/python3/</link><description>Recent content in python3 on Blogging by Heath™</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 11 Mar 2023 15:40:04 -0500</lastBuildDate><atom:link href="https://heathhenley.github.io/tags/python3/index.xml" rel="self" type="application/rss+xml"/><item><title>YOLO-ing All the Traffic Cams</title><link>https://heathhenley.github.io/posts/yolo-all-the-traffic-cams/</link><pubDate>Sat, 11 Mar 2023 15:40:04 -0500</pubDate><guid>https://heathhenley.github.io/posts/yolo-all-the-traffic-cams/</guid><description>TL;DR - Here&amp;rsquo;s a web app to list labelled traffic cam images from the RI DOT website. I used YOLO (You Only Look Once) to detect objects (vehicles) in the images and FastAPI to serve the results to a React app. The app uses LeafletJS to display the images and the results. The backend is hosted on Railway and the front end on Github Pages. The code is available on GitHub.</description></item><item><title>New England Shipwreck Map</title><link>https://heathhenley.github.io/posts/simple-wreck-map/</link><pubDate>Thu, 22 Dec 2022 15:28:45 -0500</pubDate><guid>https://heathhenley.github.io/posts/simple-wreck-map/</guid><description>TL;DR - Here&amp;rsquo;s a list of shipwrecks plotted on an interactive map, all over the Narragansett Bay and greater New England area.
Motivation At FarSounder I work on the development software of 3D Forward Looking Sonar products. Part of that development process of course includes collecting data from a lot of different situations and running it through some processing algorithms to evaluate performance and make improvements. To that end, we&amp;rsquo;re often out on the Narragansett Bay collecting data with the system, and always looking for areas in the bay with interesting features that we can use to test and benchmark our algorithms (pilings, super steep shoals, rock piles, piers, etc).</description></item><item><title>Shut the Box</title><link>https://heathhenley.github.io/posts/shut-the-box/</link><pubDate>Mon, 01 Nov 2021 21:11:13 -0400</pubDate><guid>https://heathhenley.github.io/posts/shut-the-box/</guid><description>TL;DR - choose either the option containing the largest number, or the fewest tiles and you&amp;rsquo;ll be ok!
Read on to learn more&amp;hellip;
What am I talking about? Over the summer at a friends house, I was presented with an “old bar game” that I was completely unfamiliar with. It’s a wooden tray, with the numbers 1-12 printed in ascending order on little wooden tiles.
Here’s an example of what it looks like:</description></item><item><title>Memoization in the Wild</title><link>https://heathhenley.github.io/posts/memoization-in-the-wild/</link><pubDate>Mon, 02 Aug 2021 17:32:43 -0400</pubDate><guid>https://heathhenley.github.io/posts/memoization-in-the-wild/</guid><description>Overview Memoization or memoisation is a method used to optimize programs. Usually, at least in my experience, it’s one of the first topics introduced when dynamic programming algorithms are being discussed. With a quick google search you can find the Wiki or a trillion other blogs about it - most will show the canonical example - the “hello world” of the topic - that is, using memoization to optimize a recursive implementation of a function that generates the n-th Fibonacci number (or sometimes a function computing factorials).</description></item><item><title>Computing Pi by Throwing Darts</title><link>https://heathhenley.github.io/posts/computing-pi-by-throwing-darts/</link><pubDate>Sun, 14 Mar 2021 21:17:10 -0400</pubDate><guid>https://heathhenley.github.io/posts/computing-pi-by-throwing-darts/</guid><description>In celebration of pi-day, let&amp;rsquo;s look at a method of computing pi using random numbers that is often presented in probability, statistics or other classes, as an elementary example of using random sampling and / or simulation.
In my case, the first time I remember seeing / hearing about this example was in a probability class, however we didn&amp;rsquo;t actually write any code to try it, we just looked at the idea.</description></item><item><title>Switching to the Python Pathlib Module</title><link>https://heathhenley.github.io/posts/python-pathlib-module/</link><pubDate>Sun, 15 Mar 2020 20:32:39 -0400</pubDate><guid>https://heathhenley.github.io/posts/python-pathlib-module/</guid><description>It’s been about a year or so since we officially upgraded all of our tooling at my job at FarSounder from Python 2.7 to Python 3 (3.6 at the moment). Aside from the syntactic changes, there have been a handful of updates in Python 3 that I’ve found to really increase the readability of our scripts. One of those updates (from back in Python 3.4) has been the introduction of the pathlib module.</description></item></channel></rss>