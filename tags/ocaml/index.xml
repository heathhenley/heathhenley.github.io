<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ocaml on Blogging by Heathâ„¢</title><link>https://heathhenley.dev/tags/ocaml/</link><description>Recent content in ocaml on Blogging by Heathâ„¢</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 25 Dec 2024 10:50:52 -0500</lastBuildDate><atom:link href="https://heathhenley.dev/tags/ocaml/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent of Code 2024 Notes</title><link>https://heathhenley.dev/posts/aoc-notes-2024/</link><pubDate>Wed, 25 Dec 2024 10:50:52 -0500</pubDate><guid>https://heathhenley.dev/posts/aoc-notes-2024/</guid><description>TL;DR - Misc notes from the 2024 Advent of Code in Python and Ocaml and a little bit of Golang.
The repo with my solutions to the Advent of Code 2024 problems can be found here. Here&amp;rsquo;s a bunch of random notes from this year
Languages Learned a bunch of Ocaml (even though I didnâ€™t use it everyday as intended)
Working out to do things without using mutable state Doing things that would be loops with recursion / thinking about things as recursive vs iterative Data structures in the std lib Sets are not constant time look up (use Hashtbl) Lists seem really popular but arrays exist and are nice More comfortable using Utop here and there instead running the whole script all the time Scanf with individual parser functions set up for tricky input files - example Match statements everywhere - I even started using them in Python ðŸ˜‚ I understand it doesn&amp;rsquo;t have the same benefits, but it&amp;rsquo;s a style thing that&amp;rsquo;s starting to rub off on me Wish that you didnâ€™t have to debug print using format - but I get it Also wish you could keep unreferenced functions around while debugging - but I get it I plan on completing the ones that I have not yet done in Ocaml here and there as the year goes on.</description></item><item><title>Simple tail recursion examples</title><link>https://heathhenley.dev/posts/notes-tail-recursion/</link><pubDate>Sun, 17 Nov 2024 10:09:15 -0500</pubDate><guid>https://heathhenley.dev/posts/notes-tail-recursion/</guid><description>TL;DR: re-write the recursive function so that the 1st call doesn&amp;rsquo;t need to wait for the result from the remaining calls, all the way down to the base case, before returning.
Recursive functions continue calling themselves until the base case is hit - and then they return. The continued calls keep pushing frames onto the stack and can lead to a stack overflow for large inputs. Some languages include an optimization that cleans this up, provided that the function is written in a way that it doesn&amp;rsquo;t need to wait for the results for all the other recursive calls to resolve to return.</description></item></channel></rss>