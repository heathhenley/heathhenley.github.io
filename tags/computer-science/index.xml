<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>computer science on Blogging by Heath™</title><link>https://heathhenley.github.io/tags/computer-science/</link><description>Recent content in computer science on Blogging by Heath™</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 02 Aug 2021 17:32:43 -0400</lastBuildDate><atom:link href="https://heathhenley.github.io/tags/computer-science/index.xml" rel="self" type="application/rss+xml"/><item><title>Memoization in the Wild</title><link>https://heathhenley.github.io/posts/memoization-in-the-wild/</link><pubDate>Mon, 02 Aug 2021 17:32:43 -0400</pubDate><guid>https://heathhenley.github.io/posts/memoization-in-the-wild/</guid><description>Overview Memoization or memoisation is a method used to optimize programs. Usually, at least in my experience, it’s one of the first topics introduced when dynamic programming algorithms are being discussed. With a quick google search you can find the Wiki or a trillion other blogs about it - most will show the canonical example - the “hello world” of the topic - that is, using memoization to optimize a recursive implementation of a function that generates the n-th Fibonacci number (or sometimes a function computing factorials).</description></item></channel></rss>