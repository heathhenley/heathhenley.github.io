<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>notes on Blogging by Heath™</title><link>https://heathhenley.dev/categories/notes/</link><description>Recent content in notes on Blogging by Heath™</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 21 Aug 2024 06:12:27 -0700</lastBuildDate><atom:link href="https://heathhenley.dev/categories/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Two similar apps with dissimilar tech stacks</title><link>https://heathhenley.dev/posts/implementing-similar-apps-with-dissimilar-stacks/</link><pubDate>Wed, 21 Aug 2024 06:12:27 -0700</pubDate><guid>https://heathhenley.dev/posts/implementing-similar-apps-with-dissimilar-stacks/</guid><description>TLDR - My general takeaways two similar apps. One the OG server-returns-html way with FastAPI/HTMX and one with Next.js using the app router / RSC / SSR. These are my quick take aways from the point of view of working on them from the perspective of a non-web dev.
Intro I am currently working on two somewhat similar web apps, one using FastAPI with HTMX and one using Next.js. The first (https://newdepths.</description></item><item><title>Add Callout Captions to Camtasia 2023</title><link>https://heathhenley.dev/posts/add-callout-captions-to-camtasia-2023/</link><pubDate>Mon, 08 Jan 2024 19:14:18 -0500</pubDate><guid>https://heathhenley.dev/posts/add-callout-captions-to-camtasia-2023/</guid><description>TL;DR: Use the script below to add captions from a .srt file to a Camtasia 2023 project as callouts so they can be edited and styled.
The script is available on GitHub. The Camtasia project file is just a JSON file, so this parses the captions from the .srt file and adds them to the project file as callouts.
Not intended to produce polished captions, but rather to get the captions into the project so they can be edited and styled - basically as a time saver for the initial captioning process.</description></item><item><title>Notes From Cryptopals Challenges</title><link>https://heathhenley.dev/posts/notes-from-cryptopals-challenges/</link><pubDate>Fri, 29 Dec 2023 12:58:01 -0500</pubDate><guid>https://heathhenley.dev/posts/notes-from-cryptopals-challenges/</guid><description>TL;DR: I&amp;rsquo;m working through the Cryptopals Crypto Challenges, starting with knowing nothing about cryptography. These are my (not so) random notes and takeaways from them.
Set 1 - Basics This was pretty quick and easy set to go through, but I&amp;rsquo;m glad I didn&amp;rsquo;t skip it. It introduced &amp;lsquo;repeating key XOR&amp;rsquo; and how to break some cyphers &amp;lsquo;statistically&amp;rsquo; using letter frequency. The most interesting part of the set was Breaking repeating key XOR and solution</description></item><item><title>Random Notes About Python's Random Module</title><link>https://heathhenley.dev/posts/python-random-module-random-notes/</link><pubDate>Tue, 26 Dec 2023 12:10:44 -0500</pubDate><guid>https://heathhenley.dev/posts/python-random-module-random-notes/</guid><description>TL;DR: Use the functions in the random module for modeling, simulations, games, sampling, etc. but use os.urandom, secrets, or random.SystemRandom for cryptographic applications. I know very little about cryptography and security, these are just my notes about stuff I recently learned.
It uses the Mersenne Twister algorithm, which is a pseudorandom number generator with a period of 2^19937-1. It is one of the most widely used PRNGs in the world, and suitable for many applications.</description></item></channel></rss>