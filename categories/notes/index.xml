<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>notes on Blogging by Heath™</title><link>https://heathhenley.dev/categories/notes/</link><description>Recent content in notes on Blogging by Heath™</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Oct 2024 08:30:07 -0400</lastBuildDate><atom:link href="https://heathhenley.dev/categories/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Drawing Cards without Replacement</title><link>https://heathhenley.dev/posts/drawing-without-replacement/</link><pubDate>Sat, 26 Oct 2024 08:30:07 -0400</pubDate><guid>https://heathhenley.dev/posts/drawing-without-replacement/</guid><description>TL;DR - working out the number of draws it will take you get an Ace if you&amp;rsquo;re pulling cards randomly without replacing them. Just doing it as &amp;ldquo;an exercise to the reader&amp;rdquo; - sparked by some questions that came about in an Advent of Code discord server I&amp;rsquo;m in. I work out the expected number of draws to the first &amp;lsquo;success&amp;rsquo; (drawing an Ace from a deck of cards, for example) from first principles, in a not-necessarily-rigorous-but-good-enough way (mathematicians don&amp;rsquo;t @ me.</description></item><item><title>Podcasts I've been into lately</title><link>https://heathhenley.dev/posts/podcasts/</link><pubDate>Tue, 08 Oct 2024 08:11:51 -0400</pubDate><guid>https://heathhenley.dev/posts/podcasts/</guid><description>Here are some podcasts I&amp;rsquo;ve been into lately and why I like them.
Note - I&amp;rsquo;m not affiliated with any of these podcasts, I&amp;rsquo;m just a listener.
Tech Backend Banter - Lane from boot.dev interviews a variety of other devs (mostly) and talks about their experiences and projects. I particularly like that it&amp;rsquo;s not only Golang focused. It&amp;rsquo;s mostly entertainment, but I&amp;rsquo;ve learned a few things from it. I really enjoyed the episodes with John Crickett about &amp;lsquo;mechanical sympathy&amp;rsquo; (and also his coding challenges) and the one with Thomas Ballinger about convex.</description></item><item><title>Two similar apps with dissimilar tech stacks</title><link>https://heathhenley.dev/posts/implementing-similar-apps-with-dissimilar-stacks/</link><pubDate>Wed, 21 Aug 2024 06:12:27 -0700</pubDate><guid>https://heathhenley.dev/posts/implementing-similar-apps-with-dissimilar-stacks/</guid><description>TLDR - My general takeaways from working on two similar apps. One the OG server-returns-html way with FastAPI/HTMX and one with Next.js using the app router / RSC / SSR. These are my quick take aways from the point of view of working on them from the perspective of a &amp;ldquo;non-web-dev dev&amp;rdquo;.
Intro I am currently working on two somewhat similar web apps, one using FastAPI with HTMX and one using Next.</description></item><item><title>Add Callout Captions to Camtasia 2023</title><link>https://heathhenley.dev/posts/add-callout-captions-to-camtasia-2023/</link><pubDate>Mon, 08 Jan 2024 19:14:18 -0500</pubDate><guid>https://heathhenley.dev/posts/add-callout-captions-to-camtasia-2023/</guid><description>TL;DR: Use the script below to add captions from a .srt file to a Camtasia 2023 project as callouts so they can be edited and styled.
The script is available on GitHub. The Camtasia project file is just a JSON file, so this parses the captions from the .srt file and adds them to the project file as callouts.
Not intended to produce polished captions, but rather to get the captions into the project so they can be edited and styled - basically as a time saver for the initial captioning process.</description></item><item><title>The Cryptopals Challenges</title><link>https://heathhenley.dev/posts/notes-from-cryptopals-challenges/</link><pubDate>Fri, 29 Dec 2023 12:58:01 -0500</pubDate><guid>https://heathhenley.dev/posts/notes-from-cryptopals-challenges/</guid><description>TL;DR: I&amp;rsquo;m working through the Cryptopals Cryptography Challenges, starting with knowing nothing about cryptography. These are my (not so) random notes and takeaways from them. They generally seem to follow a pattern of introducing a concept in cryptography (repeating key XOR, ECB mode, CBC mode, stream ciphers, etc) and then having you break it in some way(s). I&amp;rsquo;m hoping to turn my notes on some of these in to more detailed posts at some point, but for now, this mostly &amp;lsquo;stream of thought&amp;rsquo; that I&amp;rsquo;m updating as I work through them.</description></item><item><title>Random Notes About Python's Random Module</title><link>https://heathhenley.dev/posts/python-random-module-random-notes/</link><pubDate>Tue, 26 Dec 2023 12:10:44 -0500</pubDate><guid>https://heathhenley.dev/posts/python-random-module-random-notes/</guid><description>TL;DR: Use the functions in the random module for modeling, simulations, games, sampling, etc. but use os.urandom, secrets, or random.SystemRandom for cryptographic applications. I know very little about cryptography and security, these are just my notes about stuff I recently learned.
It uses the Mersenne Twister algorithm, which is a pseudorandom number generator with a period of 2^19937-1. It is one of the most widely used PRNGs in the world, and suitable for many applications.</description></item></channel></rss>