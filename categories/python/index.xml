<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Blogging by Heath™</title><link>https://heathhenley.github.io/categories/python/</link><description>Recent content in python on Blogging by Heath™</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 24 Apr 2024 17:15:41 -0400</lastBuildDate><atom:link href="https://heathhenley.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes: 'Hacking' on S63</title><link>https://heathhenley.github.io/posts/hacking-on-s63/</link><pubDate>Wed, 24 Apr 2024 17:15:41 -0400</pubDate><guid>https://heathhenley.github.io/posts/hacking-on-s63/</guid><description>TL;DR: The S63 encryption scheme is old and can be broken pretty easily depending on the information you have. These are some notes on how with a simple Python script to show what I mean.
So this is an old standard that will soon be replaced by S100, but it&amp;rsquo;s still in place and used today. The encryption part of the scheme is mostly to allow data suppliers to license their data to users in a standardized way and collected payment for access to that data.</description></item><item><title>How Does S-63 Electronic Navigational Chart (ENC) Format Work?</title><link>https://heathhenley.github.io/posts/how-does-s63-enc-format-work/</link><pubDate>Tue, 30 Jan 2024 19:18:13 -0500</pubDate><guid>https://heathhenley.github.io/posts/how-does-s63-enc-format-work/</guid><description>TL;DR: S-63 is a standard used to encrypt official Electronic Navigational Charts (ENCs). Encryption and signing allow clients to be sure that they have official data and that it has not been tampered with. It also make it possible for data providers to license sections of the charts (cells) and be sure that they are not being shared illegally / pirated. This post gives an overview of the process and shows how to implement the key steps.</description></item><item><title>Newton Fractals Are Cool! And a Quick Intro to Newton's Method</title><link>https://heathhenley.github.io/posts/newton-fractals-are-cool/</link><pubDate>Tue, 16 Jan 2024 12:46:44 -0500</pubDate><guid>https://heathhenley.github.io/posts/newton-fractals-are-cool/</guid><description>Newton&amp;rsquo;s method is a root-finding algorithm that can be used to find the roots of differentiable functions. It is a very simple algorithm to implement, and it converges quickly in most cases, of course depending on the function. It is often used to find the roots of polynomials. For instance, in Chemical Engineering properties calculations, often cubic equations of state are used to model the behavior of fluids. These equations of state are cubic polynomials and most solved for their roots in most cases in order to compute fluid properties and phase equilibria.</description></item><item><title>Add Callout Captions to Camtasia 2023</title><link>https://heathhenley.github.io/posts/add-callout-captions-to-camtasia-2023/</link><pubDate>Mon, 08 Jan 2024 19:14:18 -0500</pubDate><guid>https://heathhenley.github.io/posts/add-callout-captions-to-camtasia-2023/</guid><description>TL;DR: Use the script below to add captions from a .srt file to a Camtasia 2023 project as callouts so they can be edited and styled.
The script is available on GitHub. The Camtasia project file is just a JSON file, so this parses the captions from the .srt file and adds them to the project file as callouts.
Not intended to produce polished captions, but rather to get the captions into the project so they can be edited and styled - basically as a time saver for the initial captioning process.</description></item><item><title>Notes From Cryptopals Challenges</title><link>https://heathhenley.github.io/posts/notes-from-cryptopals-challenges/</link><pubDate>Fri, 29 Dec 2023 12:58:01 -0500</pubDate><guid>https://heathhenley.github.io/posts/notes-from-cryptopals-challenges/</guid><description>TL;DR: I&amp;rsquo;m working through the Cryptopals Crypto Challenges, starting with knowing nothing about cryptography. These are my (not so) random notes and takeaways from them.
Set 1 - Basics This was pretty quick and easy set to go through, but I&amp;rsquo;m glad I didn&amp;rsquo;t skip it. It introduced &amp;lsquo;repeating key XOR&amp;rsquo; and how to break some cyphers &amp;lsquo;statistically&amp;rsquo; using letter frequency. The most interesting part of the set was Breaking repeating key XOR and solution</description></item><item><title>Random Notes About Python's Random Module</title><link>https://heathhenley.github.io/posts/python-random-module-random-notes/</link><pubDate>Tue, 26 Dec 2023 12:10:44 -0500</pubDate><guid>https://heathhenley.github.io/posts/python-random-module-random-notes/</guid><description>TL;DR: Use the functions in the random module for modeling, simulations, games, sampling, etc. but use os.urandom, secrets, or random.SystemRandom for cryptographic applications. I know very little about cryptography and security, these are just my notes about stuff I recently learned.
It uses the Mersenne Twister algorithm, which is a pseudorandom number generator with a period of 2^19937-1. It is one of the most widely used PRNGs in the world, and suitable for many applications.</description></item><item><title>Update Github Profile Readme Dynamically using a Github Workflow</title><link>https://heathhenley.github.io/posts/update-gh-readme-with-action/</link><pubDate>Tue, 29 Aug 2023 20:44:26 -0400</pubDate><guid>https://heathhenley.github.io/posts/update-gh-readme-with-action/</guid><description>TL;DR: Update your Github Profile Readme dynamically with recent blog posts. There&amp;rsquo;s an example (profile and code).
Github Profile Readme Github introduced the option to a add profile readme, which is a special repository that is used to display a readme on your profile page. I wanted to post links to my recent blog posts there, so I wrote a simple python script to check for the latest X posts, and update the readme with links to them.</description></item></channel></rss>